---
layout: base
title: "ModelConnect Miami — Свежие профили моделей и фотографов"
description: "Платформа ModelConnect Miami: новые модели, фотографы и стилисты в Майами."
---

<div class="profiles-section" id="profiles">
  <h1>ModelConnect Miami</h1>
  <h2>Свежие Профили Моделей, Фотографов и Стилистов в 2025</h2>

  <div class="home-section__intro">
    <p>
      Добро пожаловать на ModelConnect Miami — ведущую платформу для поиска
      свежих профилей в fashion-индустрии Майами. Мы соединяем моделей,
      фотографов и стилистов из Майами-Бич, Халландейл, Корал-Гейблс и других
      районов. Наши ежедневные обновления помогают вам найти идеальных
      профессионалов для съемок, показов и креативных проектов.
    </p>
  </div>

  <div class="filters">
    <label for="region-select"><strong>Выберите регион:</strong></label>
    <select id="region-select">
      <option value="все">Все регионы</option>
    </select>

    <label for="category-select"><strong>Выберите категорию:</strong></label>
    <select id="category-select">
      <option value="все">Все категории</option>
    </select>
  </div>

  <div class="profile-list" id="profile-list">
    <p>Загрузка профилей...</p>
  </div>
</div>

<script type="module">
  import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";

  const supabaseUrl = "{{ env.SUPABASE_URL }}";
  const supabaseKey = "{{ env.SUPABASE_SERVICE_ROLE_KEY }}"; // Можно использовать anon ключ
  const supabase = createClient(supabaseUrl, supabaseKey);

  const profileList = document.getElementById("profile-list");
  const regionSelect = document.getElementById("region-select");
  const categorySelect = document.getElementById("category-select");

  let allProfiles = [];

  async function fetchProfiles() {
    const { data, error } = await supabase.from("profiles").select("*");
    if (error) {
      profileList.innerHTML = `<p>Ошибка загрузки профилей: ${error.message}</p>`;
      return;
    }

    allProfiles = data;
    populateFilters();
    renderProfiles();
  }

  function populateFilters() {
    const regions = [...new Set(allProfiles.map(p => p.city).filter(Boolean))];
    const categories = [...new Set(allProfiles.map(p => p.category).filter(Boolean))];

    regionSelect.innerHTML = `<option value="все">Все регионы</option>` +
      regions.map(r => `<option value="${r}">${r}</option>`).join("");
    categorySelect.innerHTML = `<option value="все">Все категории</option>` +
      categories.map(c => `<option value="${c}">${c}</option>`).join("");
  }

  function renderProfiles() {
    profileList.innerHTML = "";

    const activeRegion = regionSelect.value;
    const activeCategory = categorySelect.value;

    const filtered = allProfiles.filter(p =>
      (activeRegion === "все" || p.city === activeRegion) &&
      (activeCategory === "все" || p.category === activeCategory)
    );

    if (filtered.length === 0) {
      profileList.innerHTML = "<p>Профили не найдены</p>";
      return;
    }

    filtered.forEach(p => {
      const card = document.createElement("div");
      card.className = "profile-card";
      card.dataset.region = p.city;
      card.dataset.category = p.category;
      card.innerHTML = `
        <img class="profile-card__image" width="300" height="200"
          src="${p.image_url || '/img/placeholder.png'}"
          alt="Фото профиля ${p.name}" />
        <div class="profile-card__description">
          <h3>${p.name}</h3>
          <p>${p.city}, ${p.category}</p>
          <a href="/profiles/${p.id}/">Подробнее</a>
        </div>
      `;
      profileList.appendChild(card);
    });
  }

  regionSelect.addEventListener("change", renderProfiles);
  categorySelect.addEventListener("change", renderProfiles);

  fetchProfiles();
</script>
