---
layout: base
title: "ModelConnect Miami — Свежие профили моделей и фотографов"
description: "Платформа ModelConnect Miami: новые модели, фотографы и стилисты в Майами."
seo_title: "ModelConnect Miami — Свежие профили моделей и фотографов"
seo_description: "Найдите новых моделей, фотографов и стилистов в Майами: свежие анкеты 2025 года."
seo_og_title: "Свежие профили — ModelConnect Miami"
seo_og_description: "Ежедневные новые профили моделей, фотографов и стилистов Майами."
seo_og_image: https://models-connect.netlify.app/img/og-image-main.webp
seo_og_url: https://models-connect.netlify.app
seo_og_type: website
seo_twitter_card: summary_large_image
seo_twitter_title: "Свежие профили — ModelConnect Miami"
seo_twitter_description: "ModelConnect Miami: новые профессионалы fashion-индустрии."
seo_twitter_image: https://models-connect.netlify.app/img/og-image-main.webp
seo_canonical: https://models-connect.netlify.app/
---

<div class="profiles-section">
  <h1>ModelConnect Miami</h1>
  <h2>Свежие Профили Моделей, Фотографов и Стилистов в 2025</h2>

  <div class="home-section__intro">
    <p>
      Добро пожаловать на ModelConnect Miami — ведущую платформу для поиска
      свежих профилей в fashion-индустрии Майами. Мы соединяем моделей,
      фотографов и стилистов из Майами-Бич, Халландейл, Корал-Гейблс и других
      районов. Наши ежедневные обновления помогают вам найти идеальных
      профессионалов для съемок, показов и креативных проектов.
    </p>
  </div>

  <div class="filters">
    <label for="region-select">Выберите регион:</label>
    <select id="region-select">
      <option value="все">Все регионы</option>
    </select>

    <label for="category-select">Выберите категорию:</label>
    <select id="category-select">
      <option value="все">Все категории</option>
    </select>
  </div>

  <div class="profile-list" id="profile-list">
    <p>Загрузка профилей...</p>
  </div>
</div>

<script type="module">
import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm";


const SUPABASE_URL = "https://zftnzsbflzfhfyfnyqza.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpmdG56c2JmbHpmaGZ5Zm55cXphIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzA4NDIyNCwiZXhwIjoyMDcyNjYwMjI0fQ.Wd1QLDVjJFEUjh4BEn9mR-wR6Abi-ldyvWRtqDL8W5M";


if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  document.getElementById("profile-list").innerHTML = "<p>Ошибка: ключи Supabase не заданы</p>";
  throw new Error("SUPABASE_URL или SUPABASE_ANON_KEY отсутствуют");
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const profileList = document.getElementById("profile-list");
const regionSelect = document.getElementById("region-select");
const categorySelect = document.getElementById("category-select");

let allProfiles = [];

async function fetchProfiles() {
  const { data, error } = await supabase
    .from("profiles")
    .select("*")
    .order("created_at", { ascending: false });

  if (error) {
    profileList.innerHTML = `<p>Ошибка загрузки профилей: ${error.message}</p>`;
    return;
  }

  allProfiles = data;
  renderProfiles(allProfiles);
  populateFilters(allProfiles);
}

function renderProfiles(profiles) {
  profileList.innerHTML = "";

  if (!profiles.length) {
    profileList.innerHTML = "<p>Профили не найдены.</p>";
    return;
  }

  profiles.forEach((p) => {
    const div = document.createElement("div");
    div.className = "profile-card";
    div.dataset.region = p.city || "";
    div.dataset.category = p.category || "";
    div.innerHTML = `
      <img
        class="profile-card__image"
        width="300"
        height="200"
        src="${p.image_url || '/img/placeholder.png'}"
        alt="Фото профиля ${p.name}"
      />
      <div class="profile-card__description">
        <h3>${p.name}</h3>
        <p>${p.city || ""}, ${p.category || ""}</p>
        <a href="/profiles/${p.id}/">Подробнее</a>
      </div>
    `;
    profileList.appendChild(div);
  });
}

function populateFilters(profiles) {
  const regions = [...new Set(profiles.map(p => p.city).filter(Boolean))];
  const categories = [...new Set(profiles.map(p => p.category).filter(Boolean))];

  regions.forEach(r => {
    if (![...regionSelect.options].some(opt => opt.value === r)) {
      const option = document.createElement("option");
      option.value = r;
      option.textContent = r;
      regionSelect.appendChild(option);
    }
  });

  categories.forEach(c => {
    if (![...categorySelect.options].some(opt => opt.value === c)) {
      const option = document.createElement("option");
      option.value = c;
      option.textContent = c;
      categorySelect.appendChild(option);
    }
  });
}

function filterProfiles() {
  const region = regionSelect.value;
  const category = categorySelect.value;

  const filtered = allProfiles.filter(p => {
    const matchRegion = region === "все" || p.city === region;
    const matchCategory = category === "все" || p.category === category;
    return matchRegion && matchCategory;
  });

  renderProfiles(filtered);
}

regionSelect.addEventListener("change", filterProfiles);
categorySelect.addEventListener("change", filterProfiles);

fetchProfiles();
</script>


