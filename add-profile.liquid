---
layout: base
permalink: /add-profile/index.html
eleventyComputed:
  title: "{{ site.name3 }} — {{ site.name }}"
  description: "{{ site.description3 }} Добавьте свой профиль модели, фотографа или стилиста в Майами."
  seo_title: "{{ site.name3 }} — {{ site.name }}"
  seo_description: "{{ site.description3 }} Создайте уникальный профиль модели, фотографа или стилиста на ModelConnect Miami и присоединяйтесь к сообществу."
  seo_og_title: "{{ site.name3 }} — {{ site.name }}"
  seo_og_description: "{{ site.description3 }} Заполните форму для добавления профиля на ModelConnect Miami."
  seo_og_image: "{{ site.url }}{{ site.seo_og_image }}"
  seo_og_url: "{{ site.url }}/add-profile"
  seo_twitter_title: "{{ site.name3 }} — {{ site.name }}"
  seo_twitter_description: "{{ site.description3 }} Создайте профиль на ModelConnect Miami."
  seo_twitter_image: "{{ site.url }}{{ site.seo_og_image }}"
  seo_canonical: "{{ site.url }}/add-profile"
  seo_json_ld: |
    {
      "@context": "https://schema.org",
      "@type": "WebPage",
      "name": "{{ site.name3 }} — {{ site.name }}",
      "url": "{{ site.url }}/add-profile",
      "description": "{{ site.description3 }} Форма для добавления профиля модели, фотографа или стилиста в Майами."
    }
---

<div class="add-profile-section">
  <h1>Добавить профиль</h1>
  <form id="add-profile-form" enctype="multipart/form-data">
    <div class="form-group">
      <label for="name">Имя:</label>
      <input type="text" id="name" name="name" required />
    </div>

    <div class="form-group">
      <label for="city">Город:</label>
      <select id="city" name="city" required>
        <option value="" disabled selected>Выберите город</option>
      </select>
    </div>

    <div class="form-group">
      <label for="category">Категория:</label>
      <select id="category" name="category" required>
        <option value="" disabled selected>Выберите категорию</option>
      </select>
    </div>

    <div class="form-group">
      <label for="description">Описание:</label>
      <textarea id="description" name="description" required></textarea>
    </div>

    <div class="form-group">
      <label for="age">Возраст:</label>
      <input type="number" id="age" name="age" min="18" max="100" required />
    </div>

    <div class="form-group">
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />
    </div>

    <div class="form-group">
      <label for="phone">Телефон (опционально):</label>
      <input type="tel" id="phone" name="phone" />
    </div>

    <div class="form-group">
      <label for="image">Фото профиля:</label>
      <input type="file" name="image" id="image" accept="image/jpeg,image/png,image/webp" required />
    </div>

    <button type="submit">Отправить</button>
  </form>
</div>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  if (!window.SUPABASE_URL || !window.SUPABASE_KEY) {
    console.error("SUPABASE_URL или SUPABASE_KEY не определены!");
    return;
  }

  const supabase = window.supabase.createClient(window.SUPABASE_URL, window.SUPABASE_KEY);

  const citySelect = document.getElementById("city");
  const categorySelect = document.getElementById("category");

  try {
    const { data: citiesData } = await supabase
      .from("profiles")
      .select("city")
      .neq("city", null);

    const uniqueCities = [...new Set(citiesData.map(p => p.city))];
    uniqueCities.forEach(c => citySelect.appendChild(new Option(c, c)));

    const { data: categoriesData } = await supabase
      .from("profiles")
      .select("category")
      .neq("category", null);

    const uniqueCategories = [...new Set(categoriesData.map(p => p.category))];
    uniqueCategories.forEach(c => categorySelect.appendChild(new Option(c, c)));
  } catch (err) {
    console.error("Ошибка загрузки селектов:", err);
  }


  const form = document.getElementById("add-profile-form");
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const profileData = Object.fromEntries(formData.entries());

    try {

      let imageUrl = null;
      const imageFile = formData.get("image");
      if (imageFile && imageFile.size > 0) {
        const fileExt = imageFile.name.split('.').pop();
        const fileName = `${Date.now()}.${fileExt}`;
        const { data: uploadData, error: uploadError } = await supabase
          .storage.from("profiles-images")
          .upload(fileName, imageFile);

        if (uploadError) throw uploadError;

        const { data: publicUrl } = supabase
          .storage.from("profiles-images")
          .getPublicUrl(fileName);

        imageUrl = publicUrl.publicUrl;
      }

         const { data, error } = await supabase
        .from("profiles")
        .insert([{ ...profileData, image_url: imageUrl }]);

      if (error) throw error;

            window.location.href = "/submit-profile/";

    } catch (err) {
      console.error("Ошибка при отправке профиля:", err);
      alert("Произошла ошибка при отправке профиля. Попробуйте еще раз.");
    }
  });
});
</script>
