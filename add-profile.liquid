---
layout: base
permalink: /add-profile/index.html
eleventyComputed:
  title: "{{ site.name3 }} — {{ site.name }}"
  description: "{{ site.description3 }} Добавьте свой профиль модели, фотографа или стилиста в Майами."
  seo_title: "{{ site.name3 }} — {{ site.name }}"
  seo_description: "{{ site.description3 }} Создайте уникальный профиль модели, фотографа или стилиста на ModelConnect Miami и присоединяйтесь к сообществу."
  seo_og_title: "{{ site.name3 }} — {{ site.name }}"
  seo_og_description: "{{ site.description3 }} Заполните форму для добавления профиля на ModelConnect Miami."
  seo_og_image: "{{ site.url }}{{ site.seo_og_image }}"
  seo_og_url: "{{ site.url }}/add-profile"
  seo_twitter_title: "{{ site.name3 }} — {{ site.name }}"
  seo_twitter_description: "{{ site.description3 }} Создайте профиль на ModelConnect Miami."
  seo_twitter_image: "{{ site.url }}{{ site.seo_og_image }}"
  seo_canonical: "{{ site.url }}/add-profile"
  seo_json_ld: |
    {
      "@context": "https://schema.org",
      "@type": "WebPage",
      "name": "{{ site.name3 }} — {{ site.name }}",
      "url": "{{ site.url }}/add-profile",
      "description": "{{ site.description3 }} Форма для добавления профиля модели, фотографа или стилиста в Майами.",
      "publisher": {
        "@type": "Organization",
        "name": "{{ site.name }}",
        "logo": {
          "@type": "ImageObject",
          "url": "{{ site.url }}/img/logo.png"
        }
      }
    }
---
<div class="add-profile-section">
  <h1>Добавить профиль</h1>
  <form
    novalidate
    id="add-profile-form"
    aria-label="Форма добавления профиля"
  >


    <div class="form-group">
      <label for="name">Имя:</label>
      <input type="text" id="name" name="name" required aria-required="true" />
    </div>

    <div class="form-group">
      <label for="city">Город:</label>
      <select id="city" name="city" required aria-required="true">
        <option value="" disabled selected>Выберите город</option>
        {% for region in allRegions %}
          <option value="{{ region | escape }}">{{ region | escape }}</option>
        {% endfor %}
      </select>
    </div>

    <div class="form-group">
      <label for="category">Категория:</label>
      <select id="category" name="category" required aria-required="true">
        <option value="" disabled selected>Выберите категорию</option>
        {% for category in allCategories %}
          <option value="{{ category | escape }}">{{ category | escape }}</option>
        {% endfor %}
      </select>
    </div>

    <div class="form-group">
      <label for="description">Описание:</label>
      <textarea id="description" name="description" required aria-required="true"></textarea>
    </div>

    <div class="form-group">
      <label for="age">Возраст:</label>
      <input type="number" id="age" name="age" required aria-required="true" min="18" max="100" />
    </div>

    <div class="form-group">
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required aria-required="true" />
    </div>

    <div class="form-group">
      <label for="phone">Телефон (опционально):</label>
      <input type="tel" id="phone" name="phone" aria-describedby="phone-note" />
      <p id="phone-note" class="form-note">Укажите телефон в формате +1XXXYYYZZZZ</p>
    </div>

    <div class="form-group">
      <label for="image">Фото профиля:</label>
      <input type="file" name="image" id="image" accept="image/jpeg,image/png,image/webp" required aria-required="true" />
      <p class="form-note">Рекомендуемый размер: 300x300px, формат: JPG, PNG, WEBP.</p>
    </div>

    <button type="submit" aria-label="Отправить форму добавления профиля">Отправить</button>
  </form>
</div>

<script type="module">
  async function cloudinaryUpload(file) {
    const form = new FormData();
    form.append('file', file);
    form.append('upload_preset', 'unsigned_profiles');
    const res = await fetch('https://api.cloudinary.com/v1_1/dimallvw3/upload', {
      method: 'POST',
      body: form
    });
    const data = await res.json();
    if (!res.ok) throw new Error('Cloudinary upload failed: ' + JSON.stringify(data));
    return data.secure_url;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#add-profile-form');
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const fd = new FormData(form);
      let image_url = '/img/placeholder.webp';
      const file = fd.get('image');
      if (file && file.size) {
        try {
          image_url = await cloudinaryUpload(file);
        } catch (err) {
                    alert('Ошибка загрузки изображения: ' + err.message);
          return;
        }
      }

      const payload = {
        name: fd.get('name').trim(),
        city: fd.get('city'),
        category: fd.get('category'),
        description: fd.get('description'),
        age: parseInt(fd.get('age')),
        email: fd.get('email'),
        phone: fd.get('phone') || null,
        image_url
      };

      try {
        const resp = await fetch('/.netlify/functions/add-profile', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await resp.json();
        if (!resp.ok) {
          throw new Error('Ошибка сервера: ' + result.error);
        }

             localStorage.setItem('newProfile', JSON.stringify(result.profile));
        alert('Профиль успешно добавлен!');
        window.location.href = '/';
      } catch (err) {
        console.error('Ошибка при отправке формы:', err.message);
        alert('Ошибка при отправке формы: ' + err.message);
      }
    });
  });
</script>