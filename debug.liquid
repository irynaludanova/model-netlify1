---
layout: base
title: Debug Profiles
---

<h1>Debug Profiles</h1>

<div class="filters">
  <label for="region-select">Регион:</label>
  <select id="region-select"></select>

  <label for="category-select">Категория:</label>
  <select id="category-select"></select>
</div>

<div id="profile-list">Загрузка профилей...</div>

<div id="pagination-container"></div>

<style>
  .filters { margin-bottom: 20px; }
  .filters select { margin-right: 10px; padding: 5px; }
  #profile-list { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
  .profile-card { border: 1px solid #ddd; border-radius: 8px; overflow: hidden; }
  .profile-card img { width: 100%; display: block; }
  .profile-card__description { padding: 10px; }
  .profile-card__description h3 { margin: 0 0 5px; }
  .pagination { margin-top: 20px; }
  .pagination a { margin: 0 5px; text-decoration: none; padding: 5px 10px; border: 1px solid #ccc; border-radius: 4px; }
  .pagination a.active { background-color: #333; color: #fff; }
</style>

<script type="module">
import { createClient } from "https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/module/supabase.js";

const supabaseUrl = "https://zftnzsbflzfhfyfnyqza.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpmdG56c2JmbHpmaGZ5Zm55cXphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwODQyMjQsImV4cCI6MjA3MjY2MDIyNH0.ZiNtVmNKFPsW7NPngNvRrDsRFwcPQw0aE6m8FwmCvZg";
const supabase = createClient(supabaseUrl, supabaseKey);

const PAGE_SIZE = 4;

function debug(...args) { console.log("[profiles.js]", ...args); }

function normalizeString(str) {
  if (!str) return "";
  return String(str).normalize("NFKD").replace(/\u00A0/g, " ").trim().toLowerCase().replace(/[\s\-_]+/g, "-");
}

async function fetchProfiles() {
  try {
    const { data, error } = await supabase.from("profiles").select("*").order("id", { ascending: false });
    if (error) throw error;
    debug("Fetched profiles:", data);
    return data;
  } catch (err) {
    console.error("[profiles.js] error", err);
    return [];
  }
}

function renderProfiles(list) {
  const profileList = document.getElementById("profile-list");
  if (!profileList) return;

  profileList.innerHTML = "";
  if (!list.length) {
    profileList.innerHTML = "<p>Профили не найдены.</p>";
    return;
  }

  debug("Rendering profiles:", list.length);
  list.forEach(profile => {
    const regionSlug = normalizeString(profile.city);
    const categorySlug = normalizeString(profile.category);

    const html = `
      <div class="profile-card" data-region="${regionSlug}" data-category="${categorySlug}">
        <img src="https://res.cloudinary.com/dimallvw3/image/upload/w_300,h_200,c_fill,q_auto,f_webp/${
          profile.image_url?.replace("https://res.cloudinary.com/dimallvw3/image/upload/", "") || "placeholder.webp"
        }" alt="${profile.name || ""}" loading="lazy"/>
        <div class="profile-card__description">
          <h3>${profile.name || "Без имени"}</h3>
          <p>${profile.city || "Регион не указан"}, ${profile.category || "Категория не указана"}</p>
          ${profile.description ? `<p>${profile.description}</p>` : ""}
          ${profile.age ? `<p>Возраст: ${profile.age}</p>` : ""}
          ${profile.email ? `<p>Email: <a href="mailto:${profile.email}">${profile.email}</a></p>` : ""}
          ${profile.phone ? `<p>Телефон: <a href="tel:${profile.phone}">${profile.phone}</a></p>` : ""}
          <a href="/profiles/${profile.id}/">Подробнее</a>
        </div>
      </div>
    `;
    profileList.insertAdjacentHTML("beforeend", html);
  });
}

function setupFiltersAndPagination() {
  const profileList = document.getElementById("profile-list");
  const regionSelect = document.getElementById("region-select");
  const categorySelect = document.getElementById("category-select");
  const paginationContainer = document.getElementById("pagination-container");

  if (!profileList || !regionSelect || !categorySelect || !paginationContainer) return;

  const allProfiles = window.allProfilesData.map(p => ({
    ...p,
    regionSlug: normalizeString(p.city),
    categorySlug: normalizeString(p.category)
  }));

  const regions = [...new Set(allProfiles.map(p => p.city).filter(Boolean))];
  const categories = [...new Set(allProfiles.map(p => p.category).filter(Boolean))];

  // Заполняем селекты
  regionSelect.innerHTML = "";
  categorySelect.innerHTML = "";
  regionSelect.appendChild(new Option("Все регионы", "все"));
  categorySelect.appendChild(new Option("Все категории", "все"));
  regions.forEach(r => regionSelect.appendChild(new Option(r, normalizeString(r))));
  categories.forEach(c => categorySelect.appendChild(new Option(c, normalizeString(c))));

  let currentPage = 1;

  function getFilteredProfiles() {
    const region = regionSelect.value;
    const category = categorySelect.value;
    return allProfiles.filter(
      p => (region === "все" || p.regionSlug === region) && (category === "все" || p.categorySlug === category)
    );
  }

  function renderPage(page = 1) {
    const filtered = getFilteredProfiles();
    const totalPages = Math.ceil(filtered.length / PAGE_SIZE);
    if (page < 1) page = 1;
    if (page > totalPages) page = totalPages;
    currentPage = page;
    const start = (currentPage - 1) * PAGE_SIZE;
    const end = start + PAGE_SIZE;
    renderProfiles(filtered.slice(start, end));
    renderPagination(totalPages);
  }

  function renderPagination(totalPages) {
    paginationContainer.innerHTML = "";
    if (totalPages <= 1) return;

    if (currentPage > 1) {
      const prev = document.createElement("a");
      prev.href = "#";
      prev.textContent = "← Назад";
      prev.addEventListener("click", e => { e.preventDefault(); renderPage(currentPage - 1); });
      paginationContainer.appendChild(prev);
    }

    for (let i = 1; i <= totalPages; i++) {
      const pageLink = document.createElement("a");
      pageLink.href = "#";
      pageLink.textContent = i;
      if (i === currentPage) pageLink.classList.add("active");
      pageLink.addEventListener("click", e => { e.preventDefault(); renderPage(i); });
      paginationContainer.appendChild(pageLink);
    }

    if (currentPage < totalPages) {
      const next = document.createElement("a");
      next.href = "#";
      next.textContent = "Вперёд →";
      next.addEventListener("click", e => { e.preventDefault(); renderPage(currentPage + 1); });
      paginationContainer.appendChild(next);
    }
  }

  regionSelect.addEventListener("change", () => renderPage(1));
  categorySelect.addEventListener("change", () => renderPage(1));

  renderPage(1);
}

async function initProfiles() {
  debug("Fetching profiles from Supabase...");
  const profiles = await fetchProfiles();
  window.allProfilesData = profiles;
  debug("Initializing filters and pagination...");
  setupFiltersAndPagination();
}

document.addEventListener("DOMContentLoaded", initProfiles);
</script>
